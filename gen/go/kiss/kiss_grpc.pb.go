// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: kiss/kiss.proto

package kissv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Auth_AddFamily_FullMethodName           = "/Auth.Auth/AddFamily"
	Auth_GetFamily_FullMethodName           = "/Auth.Auth/GetFamily"
	Auth_DeleteFamily_FullMethodName        = "/Auth.Auth/DeleteFamily"
	Auth_Login_FullMethodName               = "/Auth.Auth/Login"
	Auth_Logout_FullMethodName              = "/Auth.Auth/Logout"
	Auth_IncreaseKisses_FullMethodName      = "/Auth.Auth/IncreaseKisses"
	Auth_DecreaseKisses_FullMethodName      = "/Auth.Auth/DecreaseKisses"
	Auth_IncreaseWifeDebt_FullMethodName    = "/Auth.Auth/IncreaseWifeDebt"
	Auth_DecreaseWifeDebt_FullMethodName    = "/Auth.Auth/DecreaseWifeDebt"
	Auth_IncreaseHusbandDebt_FullMethodName = "/Auth.Auth/IncreaseHusbandDebt"
	Auth_DecreaseHusbandDebt_FullMethodName = "/Auth.Auth/DecreaseHusbandDebt"
	Auth_AddDish_FullMethodName             = "/Auth.Auth/AddDish"
	Auth_RemoveDish_FullMethodName          = "/Auth.Auth/RemoveDish"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Определение сервиса PromoService
type AuthClient interface {
	AddFamily(ctx context.Context, in *AddFamilyRequest, opts ...grpc.CallOption) (*AddFamilyResponse, error)
	GetFamily(ctx context.Context, in *GetFamilyRequest, opts ...grpc.CallOption) (*GetFamilyResponse, error)
	DeleteFamily(ctx context.Context, in *DeleteFamilyRequest, opts ...grpc.CallOption) (*DeleteFamilyResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	IncreaseKisses(ctx context.Context, in *UpdateKissesRequest, opts ...grpc.CallOption) (*UpdateKissesResponse, error)
	DecreaseKisses(ctx context.Context, in *UpdateKissesRequest, opts ...grpc.CallOption) (*UpdateKissesResponse, error)
	IncreaseWifeDebt(ctx context.Context, in *UpdateDebtRequest, opts ...grpc.CallOption) (*UpdateDebtResponse, error)
	DecreaseWifeDebt(ctx context.Context, in *UpdateDebtRequest, opts ...grpc.CallOption) (*UpdateDebtResponse, error)
	IncreaseHusbandDebt(ctx context.Context, in *UpdateDebtRequest, opts ...grpc.CallOption) (*UpdateDebtResponse, error)
	DecreaseHusbandDebt(ctx context.Context, in *UpdateDebtRequest, opts ...grpc.CallOption) (*UpdateDebtResponse, error)
	AddDish(ctx context.Context, in *AddDishRequest, opts ...grpc.CallOption) (*AddDishResponse, error)
	RemoveDish(ctx context.Context, in *RemoveDishRequest, opts ...grpc.CallOption) (*RemoveDishResponse, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) AddFamily(ctx context.Context, in *AddFamilyRequest, opts ...grpc.CallOption) (*AddFamilyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddFamilyResponse)
	err := c.cc.Invoke(ctx, Auth_AddFamily_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetFamily(ctx context.Context, in *GetFamilyRequest, opts ...grpc.CallOption) (*GetFamilyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFamilyResponse)
	err := c.cc.Invoke(ctx, Auth_GetFamily_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DeleteFamily(ctx context.Context, in *DeleteFamilyRequest, opts ...grpc.CallOption) (*DeleteFamilyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFamilyResponse)
	err := c.cc.Invoke(ctx, Auth_DeleteFamily_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Auth_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, Auth_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) IncreaseKisses(ctx context.Context, in *UpdateKissesRequest, opts ...grpc.CallOption) (*UpdateKissesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateKissesResponse)
	err := c.cc.Invoke(ctx, Auth_IncreaseKisses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DecreaseKisses(ctx context.Context, in *UpdateKissesRequest, opts ...grpc.CallOption) (*UpdateKissesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateKissesResponse)
	err := c.cc.Invoke(ctx, Auth_DecreaseKisses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) IncreaseWifeDebt(ctx context.Context, in *UpdateDebtRequest, opts ...grpc.CallOption) (*UpdateDebtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDebtResponse)
	err := c.cc.Invoke(ctx, Auth_IncreaseWifeDebt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DecreaseWifeDebt(ctx context.Context, in *UpdateDebtRequest, opts ...grpc.CallOption) (*UpdateDebtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDebtResponse)
	err := c.cc.Invoke(ctx, Auth_DecreaseWifeDebt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) IncreaseHusbandDebt(ctx context.Context, in *UpdateDebtRequest, opts ...grpc.CallOption) (*UpdateDebtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDebtResponse)
	err := c.cc.Invoke(ctx, Auth_IncreaseHusbandDebt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DecreaseHusbandDebt(ctx context.Context, in *UpdateDebtRequest, opts ...grpc.CallOption) (*UpdateDebtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDebtResponse)
	err := c.cc.Invoke(ctx, Auth_DecreaseHusbandDebt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AddDish(ctx context.Context, in *AddDishRequest, opts ...grpc.CallOption) (*AddDishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDishResponse)
	err := c.cc.Invoke(ctx, Auth_AddDish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RemoveDish(ctx context.Context, in *RemoveDishRequest, opts ...grpc.CallOption) (*RemoveDishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveDishResponse)
	err := c.cc.Invoke(ctx, Auth_RemoveDish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
//
// Определение сервиса PromoService
type AuthServer interface {
	AddFamily(context.Context, *AddFamilyRequest) (*AddFamilyResponse, error)
	GetFamily(context.Context, *GetFamilyRequest) (*GetFamilyResponse, error)
	DeleteFamily(context.Context, *DeleteFamilyRequest) (*DeleteFamilyResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	IncreaseKisses(context.Context, *UpdateKissesRequest) (*UpdateKissesResponse, error)
	DecreaseKisses(context.Context, *UpdateKissesRequest) (*UpdateKissesResponse, error)
	IncreaseWifeDebt(context.Context, *UpdateDebtRequest) (*UpdateDebtResponse, error)
	DecreaseWifeDebt(context.Context, *UpdateDebtRequest) (*UpdateDebtResponse, error)
	IncreaseHusbandDebt(context.Context, *UpdateDebtRequest) (*UpdateDebtResponse, error)
	DecreaseHusbandDebt(context.Context, *UpdateDebtRequest) (*UpdateDebtResponse, error)
	AddDish(context.Context, *AddDishRequest) (*AddDishResponse, error)
	RemoveDish(context.Context, *RemoveDishRequest) (*RemoveDishResponse, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) AddFamily(context.Context, *AddFamilyRequest) (*AddFamilyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFamily not implemented")
}
func (UnimplementedAuthServer) GetFamily(context.Context, *GetFamilyRequest) (*GetFamilyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFamily not implemented")
}
func (UnimplementedAuthServer) DeleteFamily(context.Context, *DeleteFamilyRequest) (*DeleteFamilyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFamily not implemented")
}
func (UnimplementedAuthServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthServer) IncreaseKisses(context.Context, *UpdateKissesRequest) (*UpdateKissesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseKisses not implemented")
}
func (UnimplementedAuthServer) DecreaseKisses(context.Context, *UpdateKissesRequest) (*UpdateKissesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecreaseKisses not implemented")
}
func (UnimplementedAuthServer) IncreaseWifeDebt(context.Context, *UpdateDebtRequest) (*UpdateDebtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseWifeDebt not implemented")
}
func (UnimplementedAuthServer) DecreaseWifeDebt(context.Context, *UpdateDebtRequest) (*UpdateDebtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecreaseWifeDebt not implemented")
}
func (UnimplementedAuthServer) IncreaseHusbandDebt(context.Context, *UpdateDebtRequest) (*UpdateDebtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseHusbandDebt not implemented")
}
func (UnimplementedAuthServer) DecreaseHusbandDebt(context.Context, *UpdateDebtRequest) (*UpdateDebtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecreaseHusbandDebt not implemented")
}
func (UnimplementedAuthServer) AddDish(context.Context, *AddDishRequest) (*AddDishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDish not implemented")
}
func (UnimplementedAuthServer) RemoveDish(context.Context, *RemoveDishRequest) (*RemoveDishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDish not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_AddFamily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFamilyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AddFamily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_AddFamily_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AddFamily(ctx, req.(*AddFamilyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetFamily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFamilyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetFamily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_GetFamily_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetFamily(ctx, req.(*GetFamilyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_DeleteFamily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFamilyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).DeleteFamily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_DeleteFamily_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).DeleteFamily(ctx, req.(*DeleteFamilyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_IncreaseKisses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKissesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).IncreaseKisses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_IncreaseKisses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).IncreaseKisses(ctx, req.(*UpdateKissesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_DecreaseKisses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKissesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).DecreaseKisses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_DecreaseKisses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).DecreaseKisses(ctx, req.(*UpdateKissesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_IncreaseWifeDebt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDebtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).IncreaseWifeDebt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_IncreaseWifeDebt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).IncreaseWifeDebt(ctx, req.(*UpdateDebtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_DecreaseWifeDebt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDebtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).DecreaseWifeDebt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_DecreaseWifeDebt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).DecreaseWifeDebt(ctx, req.(*UpdateDebtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_IncreaseHusbandDebt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDebtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).IncreaseHusbandDebt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_IncreaseHusbandDebt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).IncreaseHusbandDebt(ctx, req.(*UpdateDebtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_DecreaseHusbandDebt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDebtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).DecreaseHusbandDebt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_DecreaseHusbandDebt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).DecreaseHusbandDebt(ctx, req.(*UpdateDebtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AddDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AddDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_AddDish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AddDish(ctx, req.(*AddDishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_RemoveDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RemoveDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_RemoveDish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RemoveDish(ctx, req.(*RemoveDishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFamily",
			Handler:    _Auth_AddFamily_Handler,
		},
		{
			MethodName: "GetFamily",
			Handler:    _Auth_GetFamily_Handler,
		},
		{
			MethodName: "DeleteFamily",
			Handler:    _Auth_DeleteFamily_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Auth_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Auth_Logout_Handler,
		},
		{
			MethodName: "IncreaseKisses",
			Handler:    _Auth_IncreaseKisses_Handler,
		},
		{
			MethodName: "DecreaseKisses",
			Handler:    _Auth_DecreaseKisses_Handler,
		},
		{
			MethodName: "IncreaseWifeDebt",
			Handler:    _Auth_IncreaseWifeDebt_Handler,
		},
		{
			MethodName: "DecreaseWifeDebt",
			Handler:    _Auth_DecreaseWifeDebt_Handler,
		},
		{
			MethodName: "IncreaseHusbandDebt",
			Handler:    _Auth_IncreaseHusbandDebt_Handler,
		},
		{
			MethodName: "DecreaseHusbandDebt",
			Handler:    _Auth_DecreaseHusbandDebt_Handler,
		},
		{
			MethodName: "AddDish",
			Handler:    _Auth_AddDish_Handler,
		},
		{
			MethodName: "RemoveDish",
			Handler:    _Auth_RemoveDish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kiss/kiss.proto",
}
